// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organizers {
  id                    Int                    @id @default(autoincrement())
  uuid                  String                 @unique
  organize_uid          String?
  verse_uid             String?
  name                  String
  lastname              String
  phone_number          String                 @unique
  email                 String                 @unique
  username              String                 @unique
  password              String                 @unique
  city                  String
  country               String
  organization_address  String
  organization_name     String
  cms_access_token      String?
  is_active             Boolean                @default(true)
  created_at            DateTime               @default(now())
  updated_at            DateTime?
  deleted_at            DateTime?
  package_uid           String?
  role                  String?
  connection_activities ConnectionActivities[] @relation(name: "organizer_connection_activities")

  @@map("organizer")
}

model ConnectionActivities {
  id         Int                       @id @default(autoincrement())
  uuid       String
  logged_by  String?
  note       String?
  status     EConnectionActivityStatus
  created_at DateTime                  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  organizer  Organizers                @relation(name: "organizer_connection_activities", fields: [uuid], references: [uuid])

  @@map("connection_activity")
}

model MasterPackageList {
  id                   Int                   @id @default(autoincrement())
  package_uid          String
  permission_slug      String
  limit_slug           String
  limit                Int
  unit                 String?
  is_active            Boolean               @default(true)
  created_at           DateTime              @default(now())
  updated_at           DateTime?
  deleted_at           DateTime?
  masterPackage        MasterPackage?        @relation(name: "MasterPackageToMasterPackageList", fields: [package_uid], references: [uuid])
  masterPermissionList MasterPermissionList? @relation(name: "MasterPackageListToMasterPermissionList", fields: [permission_slug], references: [slug])

  @@map("mst-package-list")
}

model MasterPackage {
  uuid        String              @unique
  packageList MasterPackageList[] @relation(name: "MasterPackageToMasterPackageList")
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  description String
  image_url   String
  price       Float
  discount    Float
  period      Int
  created_at  DateTime            @default(now())
  updated_at  DateTime?
  deleted_at  DateTime?

  @@map("mst-package")
}

model MasterPermissionList {
  slug        String              @unique
  packageList MasterPackageList[] @relation(name: "MasterPackageListToMasterPermissionList")
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  description String
  is_active   Boolean             @default(true)
  created_at  DateTime            @default(now())
  updated_at  DateTime?
  deleted_at  DateTime?

  @@map("mst-permission-list")
}

model FormInputType {
  id         Int       @id @default(autoincrement())
  slug       String    @unique
  name       String    @unique
  desciption String
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  @@map("form_input_type")
}

model RegisterForm {
  id            Int            @id @default(autoincrement())
  uuid          String         @unique
  event_uid     String
  topic         String
  description   String
  require       Boolean        @default(true)
  is_active     Boolean        @default(true)
  start_date    DateTime?
  end_date      DateTime?
  created_at    DateTime       @default(now())
  updated_at    DateTime?
  deleted_at    DateTime?
  ticket_option Boolean?
  form_type     String?
  questions     QuestionForm[] @relation(name: "QuestionFormToRegisterForm")
  answer        Answer[]       @relation(name: "AnswerToRegisterForm")
  ticket        Ticket[]       @relation(name: "RegisterFormToTicket")

  @@map("register_form")
}

model QuestionForm {
  id              Int           @id @default(autoincrement())
  uuid            String        @unique
  form_uid        String
  name            String
  description     String
  input_type_slug String
  choice_list     String?
  created_at      DateTime      @default(now())
  updated_at      DateTime?
  deleted_at      DateTime?
  RegisterForm    RegisterForm? @relation(name: "QuestionFormToRegisterForm", fields: [form_uid], references: [uuid])
  answer          Answer[]      @relation(name: "AnswerToQuestionForm")

  @@map("question_form")
}

model Answer {
  id           Int           @id @default(autoincrement())
  user_uid     String
  question_uid String
  form_uid     String
  result       String
  created_at   DateTime      @default(now())
  updated_at   DateTime?
  deleted_at   DateTime?
  RegisterForm RegisterForm? @relation(name: "AnswerToRegisterForm", fields: [form_uid], references: [uuid])
  QuestionForm QuestionForm? @relation(name: "AnswerToQuestionForm", fields: [question_uid], references: [uuid])

  @@map("answer")
}

model VoteGameQuestion {
  id            Int       @id @default(autoincrement())
  uid           String    @unique
  event_uid     String?
  vote_game_uid String
  question      String
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime?
  vote_game     VoteGame  @relation(name: "VoteGameToVoteGameQuestion", fields: [vote_game_uid], references: [uid])

  @@map("vote_game_question")
}

model VoteGame {
  uid         String             @unique
  question    VoteGameQuestion[] @relation(name: "VoteGameToVoteGameQuestion")
  id          Int                @id @default(autoincrement())
  event_uid   String
  name        String
  description String
  choices_uid String?
  is_active   Boolean            @default(true)
  created_at  DateTime           @default(now())
  updated_at  DateTime?

  @@map("vote_game")
}

model VoteGameChoices {
  id         Int       @id @default(autoincrement())
  event_uid  String
  uid        String    @unique
  choices    String?
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("vote_game_choices")
}

model VoteGameResult {
  id            Int      @id @default(autoincrement())
  event_uid     String?
  vote_game_uid String?
  question_uid  String
  result        String
  created_at    DateTime @default(now())

  @@map("vote_game_result")
}

model Promotion {
  id             Int                @unique @default(autoincrement())
  name           String
  organize_uid   String
  event_uid      String
  promotion_code String             @unique
  discount_type  String
  value          Float
  limit          Int?
  amount         Int?
  is_active      Boolean            @default(true)
  start_at       DateTime
  expired_at     DateTime
  created_at     DateTime           @default(now())
  updated_at     DateTime?
  deleted_at     DateTime?
  history        PromotionHistory[] @relation(name: "PromotionToPromotionHistory")

  @@map("promotions")
}

model PromotionHistory {
  id           Int        @id @default(autoincrement())
  promotion_id Int
  user_uid     String
  created_at   DateTime   @default(now())
  Promotion    Promotion? @relation(name: "PromotionToPromotionHistory", fields: [promotion_id], references: [id])

  @@map("promotion_history")
}

model Ticket {
  id               Int           @id @default(autoincrement())
  registerform_uid String
  uuid             String        @unique
  name             String
  description      String
  image_url        String
  price            Float
  limit_type       String
  limit            Int
  amount           Int
  discount_option  Boolean?
  is_active        Boolean
  created_at       DateTime      @default(now())
  updated_at       DateTime?
  deleted_at       DateTime?
  RegisterForm     RegisterForm? @relation(name: "RegisterFormToTicket", fields: [registerform_uid], references: [uuid])
  ticket_user      TicketUser[]  @relation(name: "TicketToTicketUser")

  @@map("ticket")
}

model TicketUser {
  id             Int         @id @default(autoincrement())
  ticket_uid     String
  ticket_no      Int         @unique
  user_uid       String
  quantity       Int
  price          Float
  total          Float
  payment_type   String?
  payment_status String?
  use_status     String?
  created_at     DateTime    @default(now())
  updated_at     DateTime?
  deleted_at     DateTime?
  ticket         Ticket?     @relation(name: "TicketToTicketUser", fields: [ticket_uid], references: [uuid])
  use_tickets    UseTicket[] @relation(name: "TicketUserToUseTicket")

  @@map("ticket_user")
}

model UseTicket {
  id             Int         @id @default(autoincrement())
  ticket_user_id Int
  ticket_no      Int
  created_at     DateTime    @default(now())
  ticket_user    TicketUser? @relation(name: "TicketUserToUseTicket", fields: [ticket_user_id], references: [id])

  @@map("use_ticket")
}

enum EConnectionActivityStatus {
  CONNECTED
  DISCONNECTED
  KICKED
  BANNED
}
