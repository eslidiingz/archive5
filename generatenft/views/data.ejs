<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Index</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lazyload@2.0.0-rc.2/lazyload.js"></script>
    <style>
        body{
            padding-top: 50px;
            padding-bottom: 50px;
        }
        .scroll{
            overflow-x: auto;
        }
    </style>
</head>
<body>
    <div class="container" id="app">
        <div>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item"><a href="/">Home</a></li>
                  <li class="breadcrumb-item active" aria-current="page">{{collections.name}} <small>({{collections._id}})</small></li>
                </ol>
            </nav>
        </div>
        <div>
            <div class="card">
                <div class="card-header">
                   <div class="d-flex justify-content-between align-items-center">
                       <div>
                        Data : {{datas.length}} row
                       </div>
                       <div>
                        <a :href="`/api/asset/download/${collections._id}`" class="btn btn-sm btn-success" target="_blank">Download Image</a>
                        <a :href="`/api/asset/export/${collections._id}`" class="btn btn-sm btn-success" target="_blank">Export Excel</a>
                       </div>
                   </div>
                </div>
                <div class="card-body scroll">
                    <table class="table table-strip" id="tableExport">
                        <thead>
                            <tr>
                                <td>#</td>
                                <td>Image</td>
                                <td>Name</td>
                                <td v-for="element in datas[0].data">{{element.title}}</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(data,index) in datas">
                                <td>{{index+1}}</td>
                                <td>
                                    <img src="/image.png" :data-src="`/assets/${collections._id}/${data.name}`" class="lazy" width="100" height="100">
                                </td>
                                <td>
                                    {{data.name}}
                                </td>
                                <td v-for="element in data.data">{{(element.name.replace(/[\-_]/g, " ")).substring(0, element.name.indexOf('.'))}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

<script>

    const vue = new Vue({
        el:"#app",
        data:{
            collections:[],
            datas:[],
        },
        mounted() {
            this.collections = <%-JSON.stringify(collection)%> ;
            this.datas = <%-JSON.stringify(data)%> ;
        },
    })
    
</script>


<script>
    document.addEventListener("DOMContentLoaded", function() {
  var lazyloadImages;    

  if ("IntersectionObserver" in window) {
    lazyloadImages = document.querySelectorAll(".lazy");
    var imageObserver = new IntersectionObserver(function(entries, observer) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          var image = entry.target;
          image.src = image.dataset.src;
          image.classList.remove("lazy");
          imageObserver.unobserve(image);
        }
      });
    });

    lazyloadImages.forEach(function(image) {
      imageObserver.observe(image);
    });
  } else {  
    var lazyloadThrottleTimeout;
    lazyloadImages = document.querySelectorAll(".lazy");
    
    function lazyload () {
      if(lazyloadThrottleTimeout) {
        clearTimeout(lazyloadThrottleTimeout);
      }    

      lazyloadThrottleTimeout = setTimeout(function() {
        var scrollTop = window.pageYOffset;
        lazyloadImages.forEach(function(img) {
            if(img.offsetTop < (window.innerHeight + scrollTop)) {
              img.src = img.dataset.src;
              img.classList.remove('lazy');
            }
        });
        if(lazyloadImages.length == 0) { 
          document.removeEventListener("scroll", lazyload);
          window.removeEventListener("resize", lazyload);
          window.removeEventListener("orientationChange", lazyload);
        }
      }, 20);
    }

    document.addEventListener("scroll", lazyload);
    window.addEventListener("resize", lazyload);
    window.addEventListener("orientationChange", lazyload);
  }
})

</script>